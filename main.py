class Labyrinth:
    def __init__(self, x: int, y: int, key: bool = True, heart: int = 2, fire: int = 4):
        self.x = x
        self.y = y
        self.key = key
        self.heart = heart
        self.fire = fire


class Player(Labyrinth):
    def __init__(self, name: str, active: bool, location: Labyrinth(x=0, y=0), x: int, y: int, get_key: bool = False,
                 health: int = 5, condition: bool = True):
        super().__init__(x, y)
        self.name = name
        self.active = active
        self.location = location
        self.get_key = get_key
        self.health = health
        self.condition = condition

    def take_damage(self):
        """Здесь будет сниматся очки health, если герой получит урон от удара, стены или огня. Выведет сообщение о
        причине снятия баллов здоровья и колличества снятых баллов"""
        pass

    def to_hit_with_sword(self):
        """Здесь будет происходить обработка удара, в случае ввода игроком в консоль hit: active станет False после
         удара, если удар был сделан в момент пребывания на одной клетке с другими игроками - у них снимутся баллы
         health. Выведет сообщение с именами персонажей получивших урон, или сообщит о неудачной атаке"""
        pass

    def take_health(self):
        """Сработает при попадании на клетку с сердечком, добавив баллы health и отняв 1 от значения поля heart.
        Выведет сообщение о востановлении здоровья."""
        pass

    def get_key(self):
        """Выведет сообщение о приобритении ключа персонажем, сделает поле key : False. Так же отслеживает положение
        игрока с ключем и в случае потери выпадает на клетке где погиб герой."""
        pass

    def move(self):
        """При вводе в консоль UP - изменит положение персонажа записав х + 1 , DOWN - х - 1, LEFT - у - 1,
         RIGHT - у + 1. Перезаписывает поле location и меняет статус поля active на False."""
        pass

    def condition(self):
        """Выводит соббщения о поражении при ходе на предыдущую клетку, если значение поля health = 0, и при встрече с
        без ключа. Выводит сообщение о победе при достиженни голема, когда key для игрока в статусе True."""

        pass
"""
- Есть идея создать отдельніе переменные, в которых хранились бы все возможные координаты: место положения огней, 
генерируемое случайно после очередного круга,стен, сердец, ключа и голема, но должны ли они быть в классах или за их 
пределами?
- Нет понимания как обеспечить поочередность хода игроков. Ясно что переход должен происходить после того как 
active False, но где должна находится функция которая активирует екземпляры класса Player?
- Как лучше сделать отслеживание ключа? По задумке - если он True для экземпляра класса Labyrinth , он в то же время 
False для экземпляра класса Player. Но как это реализовать я пока разбираюсь. 
- Как это выглядит в целом, что лучше изменить?"""

